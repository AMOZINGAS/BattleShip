/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mvpMenu;

import dtos.BarcoDTO;
import dtos.CasillaDTO;
import dtos.CoordenadasDTO;
import dtos.MatrizDTO;
import dtos.NaveDTO;
import dtos.OrientacionENUM;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import javax.swing.BorderFactory;
import javax.swing.JLabel;
import static javax.swing.JList.VERTICAL;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import mensajes.Mensajes;
import mvpJuego.PresentadorJuego;

/**
 *
 * @author Amos Heli Olguin Quiroz
 */
public class VistaConfiguracion extends javax.swing.JFrame implements Observer{

    /**
     * Creates new form ViewConfiguracion
     */
    
    private PresentadorMenu presentador;
    private MatrizDTO matriz;
    
    public VistaConfiguracion(PresentadorMenu presentador) {
        this.presentador = presentador;
        this.matriz = new MatrizDTO();
        this.presentador = presentador;
        initComponents();
        iniciarTablero(); // creamos el tablero
        this.add(TableroJP, BorderLayout.CENTER); // a√±adimos el tablero al frame
        
        int anchoVentana = 10 * 40 + 50;
        int altoVentana = 10 * 40 + 70;
        TableroJP.setSize(anchoVentana, altoVentana);
         
        //Prueba Nave con DTOs
        NaveDTO barco1 = new BarcoDTO(1, "Barco", VERTICAL);
        barco1.setBounds(10, 10, 60, 20);
        hacerArrastrable(barco1); // las hacemos que se puedan arrastrar con el raton 
        this.add(barco1);
        
        
    }

    public void iniciarTablero(){
        
        TableroJP.setLayout(new GridLayout(10, 10));
        
        for (int fila = 0; fila < 10; fila++) {
            for (int col = 0; col < 10; col++) {
                CasillaDTO casilla = new CasillaDTO(new CoordenadasDTO(fila, col)); // casilla extiende de jpanel
                
                casilla.setPreferredSize(new Dimension(20, 20)); // para el tama;o de la casilla
                casilla.setBackground(Color.WHITE); // para el color de la casilla 
                casilla.setBorder(BorderFactory.createLineBorder(Color.BLACK)); // creamos lineas negras en las casillas
                
                int f = fila;
                int c = col;

                casilla.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) { System.out.println("Clic en Fila: " + f + ", Columna: " + c);}});
                    TableroJP.add(casilla);
                    matriz.addCasilla(casilla); 
            }
        }
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TableroJP = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        TableroJP.setBackground(new java.awt.Color(204, 204, 255));
        TableroJP.setLayout(new java.awt.BorderLayout());

        jButton1.setText("Ready");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Barco");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Submarino");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Porta Aviones");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Porta Aviones");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(61, 61, 61))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(43, 43, 43)
                        .addComponent(TableroJP, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(205, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(TableroJP, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3)
                        .addGap(18, 18, 18)
                        .addComponent(jButton5)))
                .addGap(18, 18, 18)
                .addComponent(jButton4)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(132, 132, 132))
            .addGroup(layout.createSequentialGroup()
                .addGap(570, 570, 570)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel TableroJP;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(Observable o, Object arg) {
        if (arg instanceof Mensajes) {
            String comando = (String) ((Mensajes) arg).getComando();
            
            if (comando.equals("PARTIDA_CREADA")) {
                this.setVisible(true);
            } else if(comando.equals("JUGADOR_UNIDO")) {
                this.setVisible(true);
            }
        }
    }
    
    public class ColocacionNavesV2 extends javax.swing.JFrame {
    
    private static int TAM;
    private static int filas;
    private static int columnas;
    

//    public ColocacionNavesV2() {
//        // para las naves
//        Nave1 = new BarcoDTO(1, "Barco 1", VERTICAL);
////        Nave2 = new Nave(SUBMARINO, HORIZONTAL, "Nave 2");
////        Nave3 = new Nave(PORTAVIONES, VERTICAL, "Nave 3");
////        Nave4 = new Nave(CRUCERO, HORIZONTAL, "Nave 4");
//        Nave1.setBounds(10, 10, 60, 20);
////        Nave2.setBounds(100, 10, 60, 20);
////        Nave3.setBounds(190, 10, 60, 20);
////        Nave4.setBounds(280, 10, 60, 20);
//        hacerArrastrable(Nave1); // las hacemos que se puedan arrastrar con el raton 
////        hacerArrastrable(Nave2);
////        hacerArrastrable(Nave3);
////        hacerArrastrable(Nave4);
//
//        add(tablero, BorderLayout.CENTER); // a√±adimos el tablero al frame
    }

    // metodo para hacer que los JLabels de las naves se puedan arrastrar
    private void hacerArrastrable(JLabel label) {
        Point puntoInicial = new Point();

        label.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                puntoInicial.setLocation(e.getPoint());
            }
        });
        
        label.addMouseMotionListener(new MouseMotionAdapter() { // para que los jlabels de las nave se puedan arrastrar
            @Override
            public void mouseDragged(MouseEvent e) {
                Point puntoActual = label.getLocation();
                int x = puntoActual.x + e.getX() - puntoInicial.x;
                int y = puntoActual.y + e.getY() - puntoInicial.y;
                label.setLocation(x, y);
            }
        });
        
       
        label.addMouseListener(new MouseAdapter() { // para que se pueda soltar un barco en la casilla
            @Override
            public void mousePressed(MouseEvent e) {
                puntoInicial.setLocation(e.getPoint());
            }
            
            @Override
            public void mouseReleased(MouseEvent e) {
                Point puntoFinal = SwingUtilities.convertPoint(label, e.getPoint(), TableroJP);
                Component comp = TableroJP.getComponentAt(puntoFinal);
                if (comp instanceof CasillaDTO) {
                    CasillaDTO casillaInicial = (CasillaDTO) comp;
                    NaveDTO nave = (NaveDTO) label;

                    CoordenadasDTO inicio = casillaInicial.getCoordenada();
                    int fila = inicio.getCoordenadasX();
                    int columna = inicio.getCoordenadasY();

                    // Determinar direcci√≥n
                    int dx = 0, dy = 0;
                    if (nave.getOrientacion() == OrientacionENUM.HORIZONTAL) {
                        dx = 0;
                        dy = 1;
                    } else { // VERTICAL
                        dx = 1;
                        dy = 0;
                    }

                    List<CasillaDTO> casillasOcupadas = new ArrayList<>();

                    // Verificar y recolectar casillas v√°lidas
                    boolean valido = true;
                    for (int i = 0; i < nave.getTamanio(); i++) {
                        int f = fila + i * dx;
                        int c = columna + i * dy;
                        if (f >= 10 || c >= 10) {
                            valido = false;
                            break;
                        }
                        //los "10" son las filas y columnas, tmbn podemos poner una variable en algun lado para definirlas
                        CasillaDTO celda = (CasillaDTO) TableroJP.getComponent(f * 10 + c);
                        if (celda.getNaveOcupante() != null) {
                            valido = false;
                            break;
                        }

                        casillasOcupadas.add(celda);
                    }

                    // Si es v√°lido, pintar y asignar nave
                    if (valido) {
                        for (CasillaDTO c : casillasOcupadas) {
                            c.setBackground(Color.BLACK);
                            c.setNaveOcupante(nave);
                        }
                        nave.setCasillas(casillasOcupadas);
                        matriz.getNaves().add(nave); // üëàguarda la nave colocada en la lista del tablero


                        // Opcional: mover JLabel de la nave fuera del panel de selecci√≥n
//                        label.setVisible(false); // o remove(label) si no lo necesitas m√°s
                    } else {
                        JOptionPane.showMessageDialog(null, "Colocaci√≥n inv√°lida: hay colisi√≥n o est√° fuera del tablero.");
                    }
                }
            }

        });
    }
    
//    public TableroDTO clonarTablero() {
//        TableroDTO tableroClon = new TableroDTO();
//        tableroClon.setLayout(new GridLayout(filas, columnas));
//
//        for (int fila = 0; fila < filas; fila++) {
//            for (int col = 0; col < columnas; col++) {
//                // Obtener la casilla original
//                CasillaDTO original = tablero.getCasilla(fila, col); // aseg√∫rate que tienes este m√©todo en Tablero
//                CasillaDTO clon = new CasillaDTO(new CoordenadasDTO(fila, col));
//                clon.setPreferredSize(new Dimension(TAM, TAM));
//                clon.setBorder(BorderFactory.createLineBorder(Color.BLACK));
//
//                // Copiar estado visual
//                clon.setBackground(original.getBackground());
//
//                // Copiar referencia de nave si tiene
//                if (original.nave != null) {
//                    clon.setNave(original.nave); // referencia a la misma nave
//                }
//
//                tableroClon.add(clon);
//                tableroClon.addCasillas(clon);
//            }
//        }
//
//        // Copiar las naves colocadas (si quieres tener acceso a ellas)
//        for (NaveDTO nave : tablero.getNavesColocadas()) {
//            tableroClon.addNaves(nave);
//        }
//
//        return tableroClon;
//    }
}
