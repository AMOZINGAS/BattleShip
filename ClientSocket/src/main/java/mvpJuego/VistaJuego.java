/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mvpJuego;

import dtos.CasillaDTO;
import dtos.CoordenadasDTO;
import dtos.JugadorDTO;
import dtos.MatrizDTO;
import dtos.NaveConfigDTO;
import dtos.NaveDTO;
import dtos.OrientacionENUM;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import mensajes.Mensajes;
import mensajes.ResConfiguracionRecibida;
import mensajes.ResJugadoresListosConfigurado;

/**
 *
 * @author Amos Heli Olguin Quiroz
 */
public class VistaJuego extends javax.swing.JFrame implements Observer{
    
    
    
    private final PresentadorJuego presentadorJuego;
    private MatrizDTO matriz;
    private JugadorDTO jugador;
    /**
     * Creates new form vistaJuego
     */
    public VistaJuego(PresentadorJuego presentadorJuego) {
        this.presentadorJuego = presentadorJuego;
        this.matriz = new MatrizDTO(jugador);
        initComponents();
        
        
        
        
        
        
    }

    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TableroP1 = new javax.swing.JPanel();
        TableroP2 = new javax.swing.JPanel();
        txtNombre = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        TableroP1.setBackground(new java.awt.Color(204, 204, 255));
        TableroP1.setLayout(new java.awt.BorderLayout());

        TableroP2.setBackground(new java.awt.Color(204, 204, 255));
        TableroP2.setLayout(new java.awt.BorderLayout());

        txtNombre.setText("jLabel1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(TableroP1, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(169, 169, 169)
                        .addComponent(txtNombre)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TableroP2, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(114, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(TableroP2, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(txtNombre)
                        .addGap(18, 18, 18)
                        .addComponent(TableroP1, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void iniciarTablero1(){
        
        TableroP1.setLayout(new GridLayout(10, 10));
        
        for (int fila = 0; fila < 10; fila++) {
            for (int col = 0; col < 10; col++) {
                CasillaDTO casilla = new CasillaDTO(new CoordenadasDTO(fila, col)); // casilla extiende de jpanel
                
                casilla.setPreferredSize(new Dimension(20, 20)); // para el tama;o de la casilla
                casilla.setBackground(Color.WHITE); // para el color de la casilla 
                casilla.setBorder(BorderFactory.createLineBorder(Color.BLACK)); // creamos lineas negras en las casillas

                casilla.addMouseListener(new MouseAdapter() {
                    Timer timer;

                    @Override
                    public void mouseClicked(MouseEvent e) {
                        if (e.getClickCount() == 1) {
                            System.out.println("Atacaste");
                        }
                    }
                });
                TableroP1.add(casilla);
                matriz.addCasilla(casilla); 
            }
        }
        
        
    }
    
public void iniciarTablero2(){
        
        TableroP2.setLayout(new GridLayout(10, 10));
        
        for (int fila = 0; fila < 10; fila++) {
            for (int col = 0; col < 10; col++) {
                CasillaDTO casilla = new CasillaDTO(new CoordenadasDTO(fila, col)); // casilla extiende de jpanel
                
                casilla.setPreferredSize(new Dimension(20, 20)); // para el tama;o de la casilla
                casilla.setBackground(Color.WHITE); // para el color de la casilla 
                casilla.setBorder(BorderFactory.createLineBorder(Color.BLACK)); // creamos lineas negras en las casillas
                
                int f = fila;
                int c = col;

                casilla.addMouseListener(new MouseAdapter() {
                    Timer timer;

                    @Override
                    public void mouseClicked(MouseEvent e) {
                        if (e.getClickCount() == 1) {
                            System.out.println("Atacaste");
                        }
                    }
                });
                TableroP2.add(casilla);
                matriz.addCasilla(casilla); 
            }
        }
        
        
    }    
    public void pintar(){
        if(jugador.getFlotilla()!=null){
            for(NaveConfigDTO nave: jugador.getFlotilla()){
                System.out.println(jugador.getFlotilla().size());
                int tamanio = 0;
                
                CasillaDTO casilla = matriz.obtenerCasillaByCoord(nave.getCoordenadaInicial());
                if (nave.getTipo().contains("Barco")) {
                    tamanio = 1;
                } else if (nave.getTipo().contains("Crucero")) {
                    tamanio = 3;
                } else if (nave.getTipo().contains("Submarino")) {
                    tamanio =2;
                } else if (nave.getTipo().contains("PortaAviones")) {
                    tamanio = 4;
                }
                // Determinar dirección
                int dx = 0, dy = 0;
                if (nave.getOrientacion() == OrientacionENUM.HORIZONTAL) {
                    dx = 0;
                    dy = 1;
                } else { // VERTICAL
                    dx = 1;
                    dy = 0;
                }

                List<CasillaDTO> casillasOcupadas = new ArrayList<>();

                // Verificar y recolectar casillas válidas
                boolean valido = true;
                for (int i = 0; i < tamanio; i++) {
                    int f = casilla.getX() + i * dx;
                    int c = casilla.getY() + i * dy;
                    if (f >= 10 || c >= 10) {
                        valido = false;
                        break;
                    }
                    //los "10" son las filas y columnas, tmbn podemos poner una variable en algun lado para definirlas
                    CasillaDTO celda = (CasillaDTO) TableroP1.getComponent(f * 10 + c);
                    if (celda.getNaveOcupante() != null) {
                        valido = false;
                        break;
                    }

                    casillasOcupadas.add(celda);
                }

                // Si es válido, pintar y asignar nave
                if (valido) {
                    for (CasillaDTO c : casillasOcupadas) {
                        c.setBackground(Color.getColor(jugador.getColor()));
                    }
                }
            }
        }
    }
    
    @Override
    public void update(Observable o, Object arg) {
        if (arg instanceof Mensajes) {
            String comando = (String) ((Mensajes) arg).getComando();
            
            if (comando.equals("JUGADORES_LISTOS")) {
                System.out.println("Entramos a abrir la ventana");
                this.setVisible(true);
                iniciarTablero1();
//                iniciarTablero2();
                pintar();
                txtNombre.setText(presentadorJuego.getNombre());
            }
            if(comando.equals("CONFIGURACION_RECIBIDA")){
                ResConfiguracionRecibida res = (ResConfiguracionRecibida) arg;
                this.jugador = presentadorJuego.getJugador();
                
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel TableroP1;
    private javax.swing.JPanel TableroP2;
    private javax.swing.JLabel txtNombre;
    // End of variables declaration//GEN-END:variables
}
